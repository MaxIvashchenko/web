{"version":3,"sources":["components/MenuToggle/MenuToggle.jsx","components/Drawer/Drawer.jsx","HOC/Layout/Layout.js","components/AnswerItem/AnswersItem.jsx","components/AnswersList/AnswersList.jsx","components/ActiveQuiz/ActiveQuiz.jsx","components/Button/Button.jsx","components/FinishedQuiz/FinishedQuiz.jsx","containers/Quiz/Quiz.js","App.js","serviceWorker.js","index.js"],"names":["MenuToggle","props","style","isOpen","push","className","join","onClick","onToggle","links","Drawer","renderLinks","map","link","index","key","href","cls","this","React","Component","Layout","state","menu","toggleMenuHandler","setState","children","AnswersItem","classes","onAnswerClick","answer","id","text","AnswersList","answers","ActiveQuiz","answerNumber","question","quizLength","Button","type","disabled","FinishedQuiz","results","quiz","onRetry","successCounter","Object","keys","reduce","total","quizItem","length","Quiz","isFinished","activeQuestion","answerState","rightAnswerId","onAnswerClickHandler","answerId","timeout","window","setTimeout","isQuizFinished","clearTimeout","retryHandler","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3e5692d1.chunk.js","sourcesContent":["import React from 'react'\nimport './MenuToggle.css'\n\nexport default function MenuToggle(props) {\nconst style = ['menuToggle', 'fa']\n\nif(props.isOpen) {\n    style.push('fa-times')\n    style.push('open')\n} else {\n    style.push('fa-bars')\n}\n\n    return (\n        <i \n        className={style.join(' ')}\n        onClick={props.onToggle}\n        />\n    )\n    \n}","import React from 'react'\nimport './Drawer.css'\n\nconst links = [1, 2, 3]\n\n\nexport default class Drawer extends React.Component {\n    renderLinks = () => {\n        return links.map((link, index) => {\n            return (\n                <li key={index}>\n                    <a href='/'>Link {link}</a>\n                </li>\n            )\n        })\n    }\n\n    render() {\nconst cls = ['drawer']\n\nif(!this.props.isOpen) {\n    cls.push('close')\n}\n\n        return (\n            <nav className={cls.join(' ')}>\n                <ul>\n                    {this.renderLinks()}\n                </ul>\n            </nav>\n        )\n    }\n\n}","import React from 'react'\nimport MenuToggle from '../../components/MenuToggle/MenuToggle'\nimport Drawer from '../../components/Drawer/Drawer'\n\nexport default class Layout extends React.Component {\n\n    state = { menu: false }\n\n\n    toggleMenuHandler = () => {\n        this.setState({\n            menu: !this.state.menu\n        })\n    }\n\n    render() {\n        return (\n            <div className='layout'>\n                <Drawer\n                    isOpen={this.state.menu}\n                />\n\n                <MenuToggle\n                    onToggle={this.toggleMenuHandler}\n                    isOpen={this.state.menu}\n                />\n                <main>\n                    {this.props.children}\n                </main>\n            </div>\n        )\n    }\n}","import React from 'react'\nimport '../AnswersList/AnswersList.css'\n\nconst AnswersItem = props => {\nlet classes = ['answerItem']\n    if (props.state) {\n        classes.push(props.state)\n    }\n\n    return (\n        <li className={classes.join(' ')} onClick={() => props.onAnswerClick(props.answer.id)}>\n            {props.answer.text}\n        </li>\n    )\n}\n\nexport default AnswersItem;","import React from 'react'\nimport './AnswersList.css'\nimport AnswersItem from '../AnswerItem/AnswersItem'\n\n\nexport default function AnswersList(props) {\n\n    return (<ul className=\"answersList\">\n        {props.answers.map((answer, index) => {\n            return (\n                <AnswersItem\n                    key={index}\n                    answer={answer}\n                    onAnswerClick={props.onAnswerClick}\n                    state={props.state ? props.state[answer.id] : null }\n                />\n            )\n        })}\n    </ul>)\n}\n\n","import React from 'react'\nimport './ActiveQuiz.css'\nimport AnswersList from '../AnswersList/AnswersList'\n\nexport default function ActiveQuiz(props) {\n\n    return (\n        <div className='activeQuiz'>\n            <p className='question'>\n                <span>\n                    <strong>{props.answerNumber}. </strong>\n                    {props.question}\n                </span>\n                <small>{props.answerNumber} из {props.quizLength}</small>\n            </p>\n            <AnswersList\n                state={props.state}\n                answers={props.answers}\n                onAnswerClick={props.onAnswerClick}\n\n            />\n        </div>\n    )\n}","import React from 'react'\nimport './Button.css'\n\nexport default function Button(props) {\n    const cls = ['button', props.type]\n\n    return (\n        <button\n        onClick={props.onClick}\n        className={cls.join(' ')}\n        disabled={props.disabled}\n        >\n            {props.children}\n        </button>\n    )\n}","import React from 'react'\nimport './FinishedQuiz.css'\nimport Button from '../Button/Button';\n\nexport default function FinishedQuiz({ results, quiz, onRetry }) {\n    const successCounter = Object.keys(results).reduce((total, key) => {\n        if (results[key] === 'success') {\n            total++\n        }\n        return total;\n    }, 0)\n\n    return (\n        <div className=\"finishedQuiz\">\n            <ul>\n                {\n                    quiz.map((quizItem, index) => {\n                        const classes = ['fa'];\n\n                        if (results[index] === 'error') {\n                            classes.push('fa-times errorFa')\n                        } else {\n                            classes.push('fa-check successFa')\n                        }\n                        return (\n                            <li key={index}>\n\n                                <strong>{index + 1}. </strong>\n                                {quizItem.question}\n                                <i className={classes.join(' ')} />\n                            </li>\n                        )\n                    })\n                }\n            </ul>\n\n            <p>Правильно: {successCounter} of {quiz.length}</p>\n            \n            <div>\n\n            <Button onClick={onRetry} type='primary'>Повторить</Button>\n            <Button  type='successBtn'>Перейти в список тестов</Button>\n            </div>\n        </div>\n    )\n}","import React from 'react'\nimport ActiveQuiz from '../../components/ActiveQuiz/ActiveQuiz'\nimport FinishedQuiz from '../../components/FinishedQuiz/FinishedQuiz'\n\nexport default class Quiz extends React.Component {\n    state = {\n        results: {}, // {[id]: 'success' or 'error'}\n        isFinished: false,\n        activeQuestion: 0,\n        answerState: null, // {[id]: 'success' or 'error'}\n        quiz: [\n            {\n                question: 'Какой город является столицей Украины?',\n                rightAnswerId: 4,\n                answers: [\n                    { text: 'Питер', id: 1 },\n                    { text: 'Москва', id: 2 },\n                    { text: 'Харьков', id: 3 },\n                    { text: 'Киев', id: 4 }\n                ]\n            },\n            // {\n            //     question: 'Чей Крым?',\n            //     rightAnswerId: 1,\n            //     answers: [\n            //         { text: 'Наш', id: 1 },\n            //         { text: 'Не наш', id: 2 },\n            //         { text: 'Их', id: 3 },\n            //         { text: 'Ничей', id: 4 }\n            //     ]\n            // },\n            // {\n            //     question: 'Какой по счету президент Зеленский?',\n            //     rightAnswerId: 2,\n            //     answers: [\n            //         { text: 'четвертый', id: 1 },\n            //         { text: 'четвертый, если забыть пороха', id: 2 },\n            //         { text: 'кто такой Зеленский', id: 3 },\n            //         { text: 'третий', id: 4 }\n            //     ]\n            // }\n        ]\n    }\n\n    onAnswerClickHandler = answerId => {\n        if (this.state.answerState) {\n            if (this.state.answerState[answerId] === 'success') { return }\n        }\n        const question = this.state.quiz[this.state.activeQuestion];\n        const results = this.state.results;\n\n        if (question.rightAnswerId === answerId) { // правильный ответ\n            if (!results[this.state.activeQuestion]) {\n                results[this.state.activeQuestion] = 'success'\n            }\n            this.setState({\n                answerState: { [answerId]: 'success' },\n                results: results\n            })\n\n            const timeout = window.setTimeout(() => {\n                if (this.isQuizFinished()) {\n                    this.setState({ isFinished: true })\n                } else {\n                    this.setState({\n                        activeQuestion: this.state.activeQuestion + 1,\n                        answerState: null // обнуляет результат предыдущего ответа\n                    });\n                }\n                window.clearTimeout(timeout)\n            }, 1000)\n        } else {\n            if (results[this.state.activeQuestion]) {\n                return\n            }             // неправильный ответ\n            results[this.state.activeQuestion] = 'error';\n            this.setState({\n                answerState: { [answerId]: 'error' },\n                results: results\n            });\n        }\n\n    }\n\n    isQuizFinished() {\n        return this.state.activeQuestion + 1 === this.state.quiz.length;\n    }\n    retryHandler = () => {\n        this.setState({\n            results: {}, // {[id]: 'success' or 'error'}\n            isFinished: false,\n            activeQuestion: 0,\n            answerState: null, // {[id]: 'success' or 'error'}\n        })\n    }\n    render() {\n\n        return (\n            <div className=\"quiz\">\n                <div className='quizWrapper'>\n                    <h1>Знаешь ли ты Нэньку?</h1>\n\n                    {this.state.isFinished ?\n                        <FinishedQuiz\n                            results={this.state.results}\n                            quiz={this.state.quiz}\n                            onRetry={this.retryHandler}\n                        />\n                        :\n                        <ActiveQuiz\n                            answers={this.state.quiz[this.state.activeQuestion].answers}\n                            question={this.state.quiz[this.state.activeQuestion].question}\n                            onAnswerClick={this.onAnswerClickHandler}\n                            quizLength={this.state.quiz.length}\n                            answerNumber={this.state.activeQuestion + 1}\n                            state={this.state.answerState}\n                        />\n                    }\n                </div>\n\n            </div>\n        )\n    }\n}","import React from 'react';\nimport './App.css';\nimport Layout from './HOC/Layout/Layout';\nimport Quiz from './containers/Quiz/Quiz';\n\nfunction App() {\n  return (\n    <Layout>\n\n     <Quiz />\n    </Layout>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}