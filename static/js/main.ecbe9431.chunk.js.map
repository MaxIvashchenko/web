{"version":3,"sources":["components/MenuToggle/MenuToggle.jsx","components/UI/Backdrop/Backdrop.jsx","components/Drawer/Drawer.jsx","HOC/Layout/Layout.js","components/AnswerItem/AnswersItem.jsx","components/AnswersList/AnswersList.jsx","components/ActiveQuiz/ActiveQuiz.jsx","components/UI/Button/Button.jsx","components/FinishedQuiz/FinishedQuiz.jsx","axios/axios-quiz.js","components/UI/Loader/Loader.jsx","containers/Quiz/Quiz.js","containers/QuizList/QuizList.jsx","components/UI/input/Input.jsx","containers/Auth/Auth.jsx","form/formFramework.js","components/UI/Select/Select.jsx","containers/QuizCreator/QuizCreator.jsx","App.js","serviceWorker.js","index.js"],"names":["MenuToggle","props","style","isOpen","push","className","join","onClick","onToggle","Backdrop","onClose","links","to","label","exact","Drawer","clickHandler","renderLinks","map","link","index","key","activeClassName","cls","this","React","Component","Layout","state","menu","toggleMenuHandler","setState","menuCloseHandler","children","AnswersItem","classes","onAnswerClick","answer","id","text","AnswersList","answers","ActiveQuiz","answerNumber","question","quizLength","Button","type","disabled","FinishedQuiz","results","quiz","onRetry","successCounter","Object","keys","reduce","total","quizItem","length","axios","create","baseURL","Loader","Quiz","title","isFinished","activeQuestion","answerState","loading","onAnswerClickHandler","answerId","rightAnswerId","timeout","window","setTimeout","isQuizFinished","clearTimeout","retryHandler","console","log","match","params","get","response","data","QuizList","quizes","renderQuizes","name","forEach","isInvalid","valid","touched","shouldValidate","Input","inputType","htmlFor","Math","random","value","onChange","errorMessage","Auth","isFormValid","formControls","email","validation","required","password","minLength","registerHandler","a","authData","returnSecureToken","post","loginHandler","submitHandler","event","preventDefault","validateControl","isValid","trim","is","onChangeHandler","controlName","control","target","arr","every","elem","action","onSubmit","renderInputs","createControl","config","validate","validateForm","hasOwnProperty","Select","options","option","createOptionControl","num","createFormControls","option1","option2","option3","option4","QuizCreator","changeHandler","renderControls","Fragment","addQuestionHandler","e","concat","questionItem","createQuizHandler","selectChangeHandler","select","App","path","component","Boolean","location","hostname","application","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ecbe9431.chunk.js","sourcesContent":["import React from 'react'\nimport './MenuToggle.css'\n\nexport default function MenuToggle(props) {\nconst style = ['menuToggle', 'fa']\n\nif(props.isOpen) {\n    style.push('fa-times')\n    style.push('open')\n} else {\n    style.push('fa-bars')\n}\n\n    return (\n        <i \n        className={style.join(' ')}\n        onClick={props.onToggle}\n        />\n    )\n    \n}","import React from 'react'\nimport './Backdrop.css'\n\nexport default function Backdrop({ onClose }) {\n    return (\n        <div className='backdrop' onClick={onClose} />\n    )\n}","import React from 'react'\nimport './Drawer.css'\nimport Backdrop from '../UI/Backdrop/Backdrop'\nimport { NavLink } from 'react-router-dom'\n\nconst links = [\n    { to: '/', label: 'Список', exact: true },\n    { to: '/auth', label: 'Авторизация', exact: false },\n    { to: '/quiz-creator', label: 'Создать тест', exact: false }\n]\n\n\nexport default class Drawer extends React.Component {\n\n    clickHandler = () => { this.props.onClose() }\n\n    renderLinks = () => {\n        return links.map((link, index) => {\n            return (\n                <li key={index}>\n                    <NavLink\n                        to={link.to}\n                        exact={link.exact}\n                        activeClassName='active'\n                        onClick={this.clickHandler}\n                    >\n                        {link.label}\n                    </NavLink>\n                </li>\n            )\n        })\n    }\n\n    render() {\n        const cls = ['drawer']\n\n        if (!this.props.isOpen) {\n            cls.push('close')\n        }\n\n        return (\n            <>\n                <nav className={cls.join(' ')}>\n                    <ul>\n                        {this.renderLinks()}\n                    </ul>\n                </nav>\n                {this.props.isOpen ? <Backdrop onClose={this.props.onClose} /> : null}\n            </>\n        )\n    }\n\n}","import React from 'react'\nimport MenuToggle from '../../components/MenuToggle/MenuToggle'\nimport Drawer from '../../components/Drawer/Drawer'\n\nexport default class Layout extends React.Component {\n\n    state = { menu: false }\n\n\n    toggleMenuHandler = () => {\n        this.setState({\n            menu: !this.state.menu\n        })\n    }\n    menuCloseHandler= () => {\n        this.setState({menu: false})\n    }\n\n    render() {\n        return (\n            \n            <div className='layout'>\n                <Drawer\n                    isOpen={this.state.menu}\n                    onClose={this.menuCloseHandler}\n                />\n\n                <MenuToggle\n                    onToggle={this.toggleMenuHandler}\n                    isOpen={this.state.menu}\n                />\n                <main>\n\n                    {this.props.children}\n                </main>\n            </div>\n        )\n    }\n}","import React from 'react'\nimport '../AnswersList/AnswersList.css'\n\nconst AnswersItem = props => {\nlet classes = ['answerItem']\n    if (props.state) {\n        classes.push(props.state)\n    }\n\n    return (\n        <li className={classes.join(' ')} onClick={() => props.onAnswerClick(props.answer.id)}>\n            {props.answer.text}\n        </li>\n    )\n}\n\nexport default AnswersItem;","import React from 'react'\nimport './AnswersList.css'\nimport AnswersItem from '../AnswerItem/AnswersItem'\n\n\nexport default function AnswersList(props) {\n\n    return (<ul className=\"answersList\">\n        {props.answers.map((answer, index) => {\n            return (\n                <AnswersItem\n                    key={index}\n                    answer={answer}\n                    onAnswerClick={props.onAnswerClick}\n                    state={props.state ? props.state[answer.id] : null }\n                />\n            )\n        })}\n    </ul>)\n}\n\n","import React from 'react'\nimport './ActiveQuiz.css'\nimport AnswersList from '../AnswersList/AnswersList'\n\nexport default function ActiveQuiz(props) {\n\n    return (\n        <div className='activeQuiz'>\n            <p className='question'>\n                <span>\n                    <strong>{props.answerNumber}. </strong>\n                    {props.question}\n                </span>\n                <small>{props.answerNumber} из {props.quizLength}</small>\n            </p>\n            <AnswersList\n                state={props.state}\n                answers={props.answers}\n                onAnswerClick={props.onAnswerClick}\n\n            />\n        </div>\n    )\n}","import React from 'react'\nimport './Button.css'\n\nexport default function Button(props) {\n    const cls = ['button', props.type]\n\n    return (\n        <button\n        onClick={props.onClick}\n        className={cls.join(' ')}\n        disabled={props.disabled}\n        >\n            {props.children}\n        </button>\n    )\n}","import React from 'react'\nimport './FinishedQuiz.css'\nimport Button from '../UI/Button/Button';\nimport { Link } from 'react-router-dom'\n\nexport default function FinishedQuiz({ results, quiz, onRetry }) {\n    const successCounter = Object.keys(results).reduce((total, key) => {\n        if (results[key] === 'success') {\n            total++\n        }\n        return total;\n    }, 0)\n\n    return (\n        <div className=\"finishedQuiz\">\n            <ul>\n                {\n                    quiz.map((quizItem, index) => {\n                        const classes = ['fa'];\n\n                        if (results[index] === 'error') {\n                            classes.push('fa-times errorFa')\n                        } else {\n                            classes.push('fa-check successFa')\n                        }\n                        return (\n                            <li key={index}>\n\n                                <strong>{index + 1}. </strong>\n                                {quizItem.question}\n                                <i className={classes.join(' ')} />\n                            </li>\n                        )\n                    })\n                }\n            </ul>\n\n            <p>Правильно: {successCounter} of {quiz.length}</p>\n\n            <div>\n\n                <Button onClick={onRetry} type='primary'>Повторить</Button>\n                <Link to='/'>\n                    <Button type='successBtn'>Перейти в список тестов</Button>\n                </Link>\n            </div>\n        </div>\n    )\n}","import axios from 'axios'\n\nexport default axios.create({\n    baseURL: 'https://react-quiz-bfeda.firebaseio.com/'\n})","import React from 'react'\nimport './Loader.css'\n\nexport default function Loader(props) {\n    return (\n        <div className=\"center\">\n            <div className=\"lds-ripple \" >\n                <div>            </div>\n                <div>            </div>\n            </div>\n        </div>\n    )\n}","import React from 'react'\nimport ActiveQuiz from '../../components/ActiveQuiz/ActiveQuiz'\nimport FinishedQuiz from '../../components/FinishedQuiz/FinishedQuiz'\nimport axios from '../../axios/axios-quiz'\nimport Loader from '../../components/UI/Loader/Loader'\n\nexport default class Quiz extends React.Component {\n    state = {\n        title: 'Quiz test ?',\n        results: {}, // {[id]: 'success' or 'error'}\n        isFinished: false,\n        activeQuestion: 0,\n        answerState: null, // {[id]: 'success' or 'error'}\n        quiz: [],\n        // [\n        //     {\n        //         question: 'Какой город является столицей Украины?',\n        //         rightAnswerId: 4,\n        //         answers: [\n        //             { text: 'Питер', id: 1 },\n        //             { text: 'Москва', id: 2 },\n        //             { text: 'Харьков', id: 3 },\n        //             { text: 'Киев', id: 4 }\n        //         ]\n        //     },\n        //     {\n        //         question: 'Чей Крым?',\n        //         rightAnswerId: 1,\n        //         answers: [\n        //             { text: 'Наш', id: 1 },\n        //             { text: 'Не наш', id: 2 },\n        //             { text: 'Их', id: 3 },\n        //             { text: 'Ничей', id: 4 }\n        //         ]\n        //     },\n        //     {\n        //         question: 'Какой по счету президент Зеленский?',\n        //         rightAnswerId: 2,\n        //         answers: [\n        //             { text: 'четвертый', id: 1 },\n        //             { text: 'четвертый, если забыть пороха', id: 2 },\n        //             { text: 'кто такой Зеленский', id: 3 },\n        //             { text: 'третий', id: 4 }\n        //         ]\n        //     }\n        // ],\n        loading: true,\n    }\n\n    onAnswerClickHandler = answerId => {\n        if (this.state.answerState) {\n            if (this.state.answerState[answerId] === 'success') { return }\n        }\n        const question = this.state.quiz[this.state.activeQuestion];\n        const results = this.state.results;\n\n        if (question.rightAnswerId === answerId) { // правильный ответ\n            if (!results[this.state.activeQuestion]) {\n                results[this.state.activeQuestion] = 'success'\n            }\n            this.setState({\n                answerState: { [answerId]: 'success' },\n                results: results\n            })\n\n            const timeout = window.setTimeout(() => {\n                if (this.isQuizFinished()) {\n                    this.setState({ isFinished: true })\n                } else {\n                    this.setState({\n                        activeQuestion: this.state.activeQuestion + 1,\n                        answerState: null // обнуляет результат предыдущего ответа\n                    });\n                }\n                window.clearTimeout(timeout)\n            }, 1000)\n        } else {\n            if (results[this.state.activeQuestion]) {\n                return\n            }             // неправильный ответ\n            results[this.state.activeQuestion] = 'error';\n            this.setState({\n                answerState: { [answerId]: 'error' },\n                results: results\n            });\n        }\n\n    }\n\n    isQuizFinished() {\n        return this.state.activeQuestion + 1 === this.state.quiz.length;\n    }\n    retryHandler = () => {\n        this.setState({\n            results: {}, // {[id]: 'success' or 'error'}\n            isFinished: false,\n            activeQuestion: 0,\n            answerState: null, // {[id]: 'success' or 'error'}\n        })\n    }\n    async componentDidMount() {\n        console.log('quiz id = ', this.props.match.params.id)\n        try {\n            const response = await axios.get(`/quizes/${this.props.match.params.id}.json`);\n            const quiz = response.data;\n            this.setState({ quiz, loading: false })\n        }\n        catch (error) {\n            console.log(error)\n        }\n    }\n    render() {\n\n        return (\n            <div className=\"quiz\">\n                <div className='quizWrapper'>\n                    <h1>{this.state.title}</h1>\n                    {this.state.loading ? <Loader /> :\n\n                        this.state.isFinished ?\n                            <FinishedQuiz\n                                results={this.state.results}\n                                quiz={this.state.quiz}\n                                onRetry={this.retryHandler}\n                            />\n                            :\n                            <ActiveQuiz\n                                answers={this.state.quiz[this.state.activeQuestion].answers}\n                                question={this.state.quiz[this.state.activeQuestion].question}\n                                onAnswerClick={this.onAnswerClickHandler}\n                                quizLength={this.state.quiz.length}\n                                answerNumber={this.state.activeQuestion + 1}\n                                state={this.state.answerState}\n                            />\n                    }\n                </div>\n\n            </div>\n        )\n    }\n}","import React, { Component } from 'react'\nimport './QuizList.css'\nimport { NavLink } from 'react-router-dom'\nimport axios from '../../axios/axios-quiz'\nimport Loader from '../../components/UI/Loader/Loader'\n\nexport default class QuizList extends Component {\n    state = {\n        quizes: [],\n        loading: true\n    }\n    renderQuizes = () => {\n        return this.state.quizes.map((quiz, index) => {\n            console.log(quiz)\n            return (\n                <li key={quiz.id}>\n                    <NavLink to={'/quiz/' + quiz.id}>\n                        {quiz.name}\n                    </NavLink>\n                </li>\n            )\n        })\n    }\n\n    async componentDidMount() {\n        try {\n            const response = await axios.get('/quizes.json');\n            const quizes = [];\n            Object.keys(response.data).forEach((key, index) => {\n                quizes.push({\n                    id: key,\n                    name: `Тест №${index + 1}`\n                })\n            })\n            this.setState({ quizes , loading: false})\n        }\n        catch (error) {\n            console.log(error)\n        }\n    }\n\n    render() {\n        return (\n            <div className='quizList'>\n                <div>\n                    <h1>Список тестов</h1>\n\n                    {\n                        this.state.loading ? <Loader /> :\n                            <ul>\n                                {this.renderQuizes()}\n                            </ul>\n                    }\n\n\n                </div>\n            </div>\n        )\n    }\n}\n","import React from 'react'\nimport './input.css'\n\n\nfunction isInvalid({ valid, touched, shouldValidate }) {\n    return !valid && touched && shouldValidate;\n}\n\n\nexport default function Input(props) {\n    const inputType = props.type || 'text'\n    const cls = ['input'];\n    const htmlFor = `${inputType}-${Math.random(0,5)}`\n\n    if (isInvalid(props)) {\n        cls.push('invalid')\n    }\n\n\n    return (\n        <div className={cls.join(' ')} >\n            <label htmlFor={htmlFor}>{props.label}</label>\n            <input\n                type={inputType}\n                id={htmlFor}\n                value={props.value}\n                onChange={props.onChange}\n            ></input>\n            {isInvalid(props) ? <span>{props.errorMessage || \"Введите верное значение\"}</span> : null}\n\n        </div>\n    )\n}\n\n","import React from 'react'\nimport './Auth.css'\nimport Button from '../../components/UI/Button/Button'\nimport Input from '../../components/UI/input/Input'\nimport is from 'is_js'\nimport axios from 'axios'\n\nexport default class Auth extends React.Component {\n    state = {\n        isFormValid: false,\n        formControls: {\n            email: {\n                value: '',\n                type: 'email',\n                label: \"Email\",\n                errorMessage: 'Введите корректный email !',\n                valid: false,\n                touched: false,\n                validation: {\n                    required: true,\n                    email: true\n                }\n            },\n            password: {\n                value: '',\n                type: 'password',\n                label: \"Пароль\",\n                errorMessage: 'Введите корректный Пароль !',\n                valid: false,\n                touched: false,\n                validation: {\n                    required: true,\n                    minLength: 6\n                }\n            }\n        }\n    }\n\n\n    registerHandler = async () => {\n        const authData = {\n            email: this.state.formControls.email.value,\n            password: this.state.formControls.password.value,\n            returnSecureToken: true,\n        }\n        try {\n            const response = await axios.post('https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyBtl51uvOgr_R-GSjlj9puKtasevDRqoiQ', authData)\n            console.log(response.data)\n        } catch (e) {\n            console.log(e)\n        }\n    }\n    loginHandler = async () => {  \n        const authData = {\n        email: this.state.formControls.email.value,\n        password: this.state.formControls.password.value,\n        returnSecureToken: true,\n    }\n    try {\n        const response = await axios.post('https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyBtl51uvOgr_R-GSjlj9puKtasevDRqoiQ', authData)\n        console.log(response.data)\n    } catch (e) {\n        console.log(e)\n    } }\n    submitHandler = (event) => event.preventDefault();\n\n    validateControl = (value, validation) => {\n        if (!validation) { return true }\n        let isValid = true;\n        if (validation.required) {\n            isValid = value.trim() !== '' && isValid;\n        }\n        if (validation.email) {\n            isValid = is.email(value) && isValid;\n        }\n        if (validation.minLength) {\n            isValid = value.length >= validation.minLength && isValid;\n        }\n\n        return isValid;\n    }\n    onChangeHandler = (event, controlName) => {\n\n        const formControls = { ...this.state.formControls }; // копия всех инпутов\n        const control = { ...formControls[controlName] } // навзание копированого инпута\n\n        control.value = event.target.value;\n        control.touched = true;\n        control.valid = this.validateControl(control.value, control.validation)\n\n        formControls[controlName] = control\n\n        let isFormValid = false;\n\n        const arrWithValidation = Object.keys(formControls).reduce((arr, name) => {\n            arr.push(formControls[name].valid);\n\n            return arr;\n        }, [])\n        let isAllFormsValid = arrWithValidation.every(elem => elem === true)\n\n        if (isAllFormsValid) { isFormValid = true }\n\n\n        this.setState({ formControls, isFormValid })\n    }\n\n    renderInputs() {\n        return Object.keys(this.state.formControls).map((controlName, index) => {\n            const control = this.state.formControls[controlName]\n\n            return (\n                <Input\n                    key={controlName + index}\n                    type={control.type}\n                    value={control.value}\n                    valid={control.valid}\n                    touched={control.touched}\n                    label={control.label}\n                    shouldValidate={!!control.validation}\n                    errorMessage={control.errorMessage}\n                    onChange={event => this.onChangeHandler(event, controlName)}\n                />\n            )\n        })\n    }\n\n    render() {\n        return (\n            <div className='auth'>\n                <div>\n                    <h1>Авторизация</h1>\n                    <form className='authForm' action=\"\" onSubmit={this.submitHandler}>\n\n                        {this.renderInputs()}\n                        <Button\n                            type='success'\n                            onClick={this.loginHandler}\n                            disabled={!this.state.isFormValid}\n                        >\n                            Войти</Button>\n\n                        <Button\n                            type='primary'\n                            onClick={this.registerHandler}\n                            disabled={!this.state.isFormValid}\n                        >\n                            Зарегестрироваться</Button>\n                    </form>\n                </div>\n            </div>\n        )\n    }\n}","export function createControl(config, validation) {\n    return {\n        ...config,\n        validation,\n        valid: !validation,\n        touched: false,\n        value: ''\n    }\n}\n\nexport function validate(value, validation = null) {\n    if (!validation) { return true }\n    let isValid = true;\n    if (validation.required) {\n        isValid = value.trim() !== '' && isValid\n    }\n\n    return isValid\n}\n\nexport function validateForm(formControls) {\n    let isFormValid = true;\n\n    for (let control in formControls) {\n        if (formControls.hasOwnProperty(control)) {\n            isFormValid = formControls[control].valid && isFormValid\n        }\n    }\n\n    return isFormValid;\n}","import React from 'react'\nimport './Select.css'\n\nexport default function Select(props) {\n\n    const htmlFor = `${props.label}-${Math.random(5)}`\n\n    return (\n        <div className='select'>\n            <label htmlFor={htmlFor}></label>\n            <select\n                id={htmlFor}\n                value={props.value}\n                onChange={props.onChange}\n            >\n                {props.options.map((option, index) => {\n                    return (\n                        <option\n                            value={option.value}\n                            key={option.value + index}\n                        >{option.text}</option>\n                    )\n                })}\n            </select>\n        </div>\n    )\n\n}\n","import React, { Component } from 'react'\nimport './QuizCreator.css'\nimport Button from '../../components/UI/Button/Button'\nimport { createControl, validate, validateForm } from '../../form/formFramework'\nimport Input from '../../components/UI/input/Input'\nimport Select from '../../components/UI/Select/Select'\nimport axios from '../../axios/axios-quiz'\n\nfunction createOptionControl(num) {\n    return createControl({\n        label: `Вариант ${num}`,\n        errorMessage: 'Значение не может быть пустым',\n        id: num\n    }, { required: true })\n}\n\nfunction createFormControls() {\n    return {\n        question: createControl({\n            label: 'Введите вопрос',\n            errorMessage: 'Вопрос не может быть пустым'\n        }, { required: true }),\n        option1: createOptionControl(1),\n        option2: createOptionControl(2),\n        option3: createOptionControl(3),\n        option4: createOptionControl(4),\n    }\n}\n\nexport default class QuizCreator extends Component {\n\n    state = {\n        quiz: [],\n        isFormValid: false,\n        rightAnswerId: 1,\n        formControls: createFormControls()\n    }\n    changeHandler = (value, controlName) => {\n        const formControls = { ...this.state.formControls }; // копия всех инпутов\n        const control = { ...formControls[controlName] } // навзание копированого инпута\n\n        control.touched = true;\n        control.value = value;\n        control.valid = validate(control.value, control.validation);\n\n        formControls[controlName] = control;\n        this.setState({\n            formControls,\n            isFormValid: validateForm(formControls)\n        })\n\n    }\n\n    renderControls = () => {\n        return Object.keys(this.state.formControls).map((controlName, index) => {\n            const control = this.state.formControls[controlName];\n\n            return (\n                <React.Fragment key={controlName + index}>\n                    <Input\n\n                        label={control.label}\n                        value={control.value}\n                        valid={control.valid}\n                        shouldValidate={!!control.validation}\n                        touched={control.touched}\n                        errorMessage={control.errorMessage}\n                        onChange={event => this.changeHandler(event.target.value, controlName)}\n\n                    />\n                    {index === 0 ? <hr /> : null}\n                </React.Fragment>\n            )\n        })\n    }\n\n\n    addQuestionHandler = e => {\n        e.preventDefault();\n\n        const quiz = this.state.quiz.concat();\n        const index = quiz.length + 1;\n\n        const questionItem = {\n            question: this.state.formControls.question.value,\n            id: index,\n            rightAnswerId: this.state.rightAnswerId,\n            answers: [\n                { text: this.state.formControls.option1.value, id: this.state.formControls.option1.id },\n                { text: this.state.formControls.option2.value, id: this.state.formControls.option2.id },\n                { text: this.state.formControls.option3.value, id: this.state.formControls.option3.id },\n                { text: this.state.formControls.option4.value, id: this.state.formControls.option4.id }\n            ]\n        }\n\n        quiz.push(questionItem)\n        this.setState({\n            quiz,\n            isFormValid: false,\n            rightAnswerId: 1,\n            formControls: createFormControls()\n        })\n\n    }\n    createQuizHandler = async event => {\n        event.preventDefault();\n\n        try {\n            await axios.post('/quizes.json', this.state.quiz)\n\n            this.setState({\n                quiz: [],\n                isFormValid: false,\n                rightAnswerId: 1,\n                formControls: createFormControls()\n            })\n        } catch (error) {\n            console.log(error)\n        }\n    }\n\n    selectChangeHandler = e => {\n        this.setState({ rightAnswerId: +e.target.value })\n    }\n\n    \n\n    render() {\n\n        const select = <Select\n            label='Выберите правильный ответ'\n            value={this.state.rightAnswerId}\n            onChange={this.selectChangeHandler}\n            options={[\n                { text: 1, value: 1 },\n                { text: 2, value: 2 },\n                { text: 3, value: 3 },\n                { text: 4, value: 4 }\n            ]}\n        />\n        return (\n            <div className='quizCreator'>\n                <div>\n                    <h1>QuizCreator</h1>\n                    <form onSubmit={e => e.preventDefault()}>\n                        {this.renderControls()}\n                        {select}\n\n                        <Button\n                            type='primary'\n                            onClick={this.addQuestionHandler}\n                        >\n                            Добавить вопрос\n                    </Button>\n\n                        <Button\n                            type='success'\n                            onClick={this.createQuizHandler}\n                        >\n                            Создать тест\n                    </Button>\n\n                    </form>\n                </div>\n            </div>\n        )\n    }\n}\n","import React from 'react';\nimport './App.css';\nimport Layout from './HOC/Layout/Layout';\nimport {Route, Switch} from 'react-router-dom'\nimport Quiz from './containers/Quiz/Quiz';\nimport QuizList from './containers/QuizList/QuizList';\nimport Auth from './containers/Auth/Auth';\nimport QuizCreator from './containers/QuizCreator/QuizCreator';\n\n\n\nfunction App() {\n  return (\n    <Layout >\n      <Switch>\n        <Route path='/auth' component={Auth}/>\n        <Route path='/quiz-creator' component={QuizCreator}/>\n        <Route path='/quiz/:id' component={Quiz}/>\n        <Route path='/' component={QuizList}/>\n      </Switch>\n    </Layout>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom'\n\n\nconst application = (<BrowserRouter><App /></BrowserRouter>);\n\nReactDOM.render(application, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}