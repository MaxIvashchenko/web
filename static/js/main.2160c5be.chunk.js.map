{"version":3,"sources":["components/MenuToggle/MenuToggle.jsx","components/Backdrop/Backdrop.jsx","components/Drawer/Drawer.jsx","HOC/Layout/Layout.js","components/AnswerItem/AnswersItem.jsx","components/AnswersList/AnswersList.jsx","components/ActiveQuiz/ActiveQuiz.jsx","components/Button/Button.jsx","components/FinishedQuiz/FinishedQuiz.jsx","containers/Quiz/Quiz.js","containers/QuizList/QuizList.jsx","containers/Auth/Auth.jsx","containers/QuizCreator/QuizCreator.jsx","App.js","serviceWorker.js","index.js"],"names":["MenuToggle","props","style","isOpen","push","className","join","onClick","onToggle","Backdrop","onClose","links","to","label","exact","Drawer","clickHandler","renderLinks","map","link","index","key","activeClassName","cls","this","React","Component","Layout","state","menu","toggleMenuHandler","setState","menuCloseHandler","children","AnswersItem","classes","onAnswerClick","answer","id","text","AnswersList","answers","ActiveQuiz","answerNumber","question","quizLength","Button","type","disabled","FinishedQuiz","results","quiz","onRetry","successCounter","Object","keys","reduce","total","quizItem","length","Quiz","title","isFinished","activeQuestion","answerState","rightAnswerId","onAnswerClickHandler","answerId","timeout","window","setTimeout","isQuizFinished","clearTimeout","retryHandler","console","log","match","params","QuizList","renderQuizes","Auth","QuizCreator","App","path","component","Boolean","location","hostname","application","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2160c5be.chunk.js","sourcesContent":["import React from 'react'\nimport './MenuToggle.css'\n\nexport default function MenuToggle(props) {\nconst style = ['menuToggle', 'fa']\n\nif(props.isOpen) {\n    style.push('fa-times')\n    style.push('open')\n} else {\n    style.push('fa-bars')\n}\n\n    return (\n        <i \n        className={style.join(' ')}\n        onClick={props.onToggle}\n        />\n    )\n    \n}","import React from 'react'\nimport './Backdrop.css'\n\nexport default function Backdrop({ onClose }) {\n    return (\n        <div className='backdrop' onClick={onClose} />\n    )\n}","import React from 'react'\nimport './Drawer.css'\nimport Backdrop from '../Backdrop/Backdrop'\nimport { NavLink } from 'react-router-dom'\n\nconst links = [\n    { to: '/', label: 'Список', exact: true },\n    { to: '/auth', label: 'Авторизация', exact: false },\n    { to: '/quiz-creator', label: 'Создать тест', exact: false }\n]\n\n\nexport default class Drawer extends React.Component {\n\n    clickHandler = () => { this.props.onClose() }\n\n    renderLinks = () => {\n        return links.map((link, index) => {\n            return (\n                <li key={index}>\n                    <NavLink\n                        to={link.to}\n                        exact={link.exact}\n                        activeClassName='active'\n                        onClick={this.clickHandler}\n                    >\n                        {link.label}\n                    </NavLink>\n                </li>\n            )\n        })\n    }\n\n    render() {\n        const cls = ['drawer']\n\n        if (!this.props.isOpen) {\n            cls.push('close')\n        }\n\n        return (\n            <>\n                <nav className={cls.join(' ')}>\n                    <ul>\n                        {this.renderLinks()}\n                    </ul>\n                </nav>\n                {this.props.isOpen ? <Backdrop onClose={this.props.onClose} /> : null}\n            </>\n        )\n    }\n\n}","import React from 'react'\nimport MenuToggle from '../../components/MenuToggle/MenuToggle'\nimport Drawer from '../../components/Drawer/Drawer'\n\nexport default class Layout extends React.Component {\n\n    state = { menu: false }\n\n\n    toggleMenuHandler = () => {\n        this.setState({\n            menu: !this.state.menu\n        })\n    }\n    menuCloseHandler= () => {\n        this.setState({menu: false})\n    }\n\n    render() {\n        return (\n            \n            <div className='layout'>\n                <Drawer\n                    isOpen={this.state.menu}\n                    onClose={this.menuCloseHandler}\n                />\n\n                <MenuToggle\n                    onToggle={this.toggleMenuHandler}\n                    isOpen={this.state.menu}\n                />\n                <main>\n\n                    {this.props.children}\n                </main>\n            </div>\n        )\n    }\n}","import React from 'react'\nimport '../AnswersList/AnswersList.css'\n\nconst AnswersItem = props => {\nlet classes = ['answerItem']\n    if (props.state) {\n        classes.push(props.state)\n    }\n\n    return (\n        <li className={classes.join(' ')} onClick={() => props.onAnswerClick(props.answer.id)}>\n            {props.answer.text}\n        </li>\n    )\n}\n\nexport default AnswersItem;","import React from 'react'\nimport './AnswersList.css'\nimport AnswersItem from '../AnswerItem/AnswersItem'\n\n\nexport default function AnswersList(props) {\n\n    return (<ul className=\"answersList\">\n        {props.answers.map((answer, index) => {\n            return (\n                <AnswersItem\n                    key={index}\n                    answer={answer}\n                    onAnswerClick={props.onAnswerClick}\n                    state={props.state ? props.state[answer.id] : null }\n                />\n            )\n        })}\n    </ul>)\n}\n\n","import React from 'react'\nimport './ActiveQuiz.css'\nimport AnswersList from '../AnswersList/AnswersList'\n\nexport default function ActiveQuiz(props) {\n\n    return (\n        <div className='activeQuiz'>\n            <p className='question'>\n                <span>\n                    <strong>{props.answerNumber}. </strong>\n                    {props.question}\n                </span>\n                <small>{props.answerNumber} из {props.quizLength}</small>\n            </p>\n            <AnswersList\n                state={props.state}\n                answers={props.answers}\n                onAnswerClick={props.onAnswerClick}\n\n            />\n        </div>\n    )\n}","import React from 'react'\nimport './Button.css'\n\nexport default function Button(props) {\n    const cls = ['button', props.type]\n\n    return (\n        <button\n        onClick={props.onClick}\n        className={cls.join(' ')}\n        disabled={props.disabled}\n        >\n            {props.children}\n        </button>\n    )\n}","import React from 'react'\nimport './FinishedQuiz.css'\nimport Button from '../Button/Button';\nimport { Link } from 'react-router-dom'\n\nexport default function FinishedQuiz({ results, quiz, onRetry }) {\n    const successCounter = Object.keys(results).reduce((total, key) => {\n        if (results[key] === 'success') {\n            total++\n        }\n        return total;\n    }, 0)\n\n    return (\n        <div className=\"finishedQuiz\">\n            <ul>\n                {\n                    quiz.map((quizItem, index) => {\n                        const classes = ['fa'];\n\n                        if (results[index] === 'error') {\n                            classes.push('fa-times errorFa')\n                        } else {\n                            classes.push('fa-check successFa')\n                        }\n                        return (\n                            <li key={index}>\n\n                                <strong>{index + 1}. </strong>\n                                {quizItem.question}\n                                <i className={classes.join(' ')} />\n                            </li>\n                        )\n                    })\n                }\n            </ul>\n\n            <p>Правильно: {successCounter} of {quiz.length}</p>\n\n            <div>\n\n                <Button onClick={onRetry} type='primary'>Повторить</Button>\n                <Link to='/'>\n                    <Button type='successBtn'>Перейти в список тестов</Button>\n                </Link>\n            </div>\n        </div>\n    )\n}","import React from 'react'\nimport ActiveQuiz from '../../components/ActiveQuiz/ActiveQuiz'\nimport FinishedQuiz from '../../components/FinishedQuiz/FinishedQuiz'\n\nexport default class Quiz extends React.Component {\n    state = {\n        title: 'Насколько ты \\'Хохо́л\\' ?',\n        results: {}, // {[id]: 'success' or 'error'}\n        isFinished: false,\n        activeQuestion: 0,\n        answerState: null, // {[id]: 'success' or 'error'}\n        quiz: [\n            {\n                question: 'Какой город является столицей Украины?',\n                rightAnswerId: 4,\n                answers: [\n                    { text: 'Питер', id: 1 },\n                    { text: 'Москва', id: 2 },\n                    { text: 'Харьков', id: 3 },\n                    { text: 'Киев', id: 4 }\n                ]\n            },\n            {\n                question: 'Чей Крым?',\n                rightAnswerId: 1,\n                answers: [\n                    { text: 'Наш', id: 1 },\n                    { text: 'Не наш', id: 2 },\n                    { text: 'Их', id: 3 },\n                    { text: 'Ничей', id: 4 }\n                ]\n            },\n            {\n                question: 'Какой по счету президент Зеленский?',\n                rightAnswerId: 2,\n                answers: [\n                    { text: 'четвертый', id: 1 },\n                    { text: 'четвертый, если забыть пороха', id: 2 },\n                    { text: 'кто такой Зеленский', id: 3 },\n                    { text: 'третий', id: 4 }\n                ]\n            }\n        ]\n    }\n\n    onAnswerClickHandler = answerId => {\n        if (this.state.answerState) {\n            if (this.state.answerState[answerId] === 'success') { return }\n        }\n        const question = this.state.quiz[this.state.activeQuestion];\n        const results = this.state.results;\n\n        if (question.rightAnswerId === answerId) { // правильный ответ\n            if (!results[this.state.activeQuestion]) {\n                results[this.state.activeQuestion] = 'success'\n            }\n            this.setState({\n                answerState: { [answerId]: 'success' },\n                results: results\n            })\n\n            const timeout = window.setTimeout(() => {\n                if (this.isQuizFinished()) {\n                    this.setState({ isFinished: true })\n                } else {\n                    this.setState({\n                        activeQuestion: this.state.activeQuestion + 1,\n                        answerState: null // обнуляет результат предыдущего ответа\n                    });\n                }\n                window.clearTimeout(timeout)\n            }, 1000)\n        } else {\n            if (results[this.state.activeQuestion]) {\n                return\n            }             // неправильный ответ\n            results[this.state.activeQuestion] = 'error';\n            this.setState({\n                answerState: { [answerId]: 'error' },\n                results: results\n            });\n        }\n\n    }\n\n    isQuizFinished() {\n        return this.state.activeQuestion + 1 === this.state.quiz.length;\n    }\n    retryHandler = () => {\n        this.setState({\n            results: {}, // {[id]: 'success' or 'error'}\n            isFinished: false,\n            activeQuestion: 0,\n            answerState: null, // {[id]: 'success' or 'error'}\n        })\n    }\n    componentDidMount(){\n        console.log('quiz id = ' , this.props.match.params.id)\n    }\n    render() {\n\n        return (\n            <div className=\"quiz\">\n                <div className='quizWrapper'>\n                    <h1>{this.state.title}</h1>\n\n                    {this.state.isFinished ?\n                        <FinishedQuiz\n                            results={this.state.results}\n                            quiz={this.state.quiz}\n                            onRetry={this.retryHandler}\n                        />\n                        :\n                        <ActiveQuiz\n                            answers={this.state.quiz[this.state.activeQuestion].answers}\n                            question={this.state.quiz[this.state.activeQuestion].question}\n                            onAnswerClick={this.onAnswerClickHandler}\n                            quizLength={this.state.quiz.length}\n                            answerNumber={this.state.activeQuestion + 1}\n                            state={this.state.answerState}\n                        />\n                    }\n                </div>\n\n            </div>\n        )\n    }\n}","import React, { Component } from 'react'\nimport './QuizList.css'\nimport { NavLink } from 'react-router-dom'\n\nexport default class QuizList extends Component {\n\n    renderQuizes = () => {\n        return [1, 2, 3].map((quiz, index) => {\n            return (\n                <li key={index}>\n                    <NavLink to={'/quiz/' + quiz}>\n                        Тест {quiz}\n                    </NavLink>\n                </li>\n            )\n        })\n    }\n\n    render() {\n        return (\n            <div className='quizList'>\n                <div>\n                    <h1>Список тестов</h1>\n                    <ul>\n                        {this.renderQuizes()}\n                    </ul>\n                </div>\n            </div>\n        )\n    }\n}\n","import React from 'react'\n\nexport default class Auth extends React.Component {\n\n\n    render() {\n        return (\n            <div>\n                <h1>Auth</h1>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react'\n\nexport default class QuizCreator extends Component {\n    render() {\n        return (\n            <div>\n                <h1>QuizCreator</h1>\n            </div>\n        )\n    }\n}\n","import React from 'react';\nimport './App.css';\nimport Layout from './HOC/Layout/Layout';\nimport {Route, Switch} from 'react-router-dom'\nimport Quiz from './containers/Quiz/Quiz';\nimport QuizList from './containers/QuizList/QuizList';\nimport Auth from './containers/Auth/Auth';\nimport QuizCreator from './containers/QuizCreator/QuizCreator';\n\n\n\nfunction App() {\n  return (\n    <Layout >\n      <Switch>\n        <Route path='/auth' component={Auth}/>\n        <Route path='/quiz-creator' component={QuizCreator}/>\n        <Route path='/quiz/:id' component={Quiz}/>\n        <Route path='/' component={QuizList}/>\n      </Switch>\n    </Layout>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom'\n\n\nconst application = (<BrowserRouter><App /></BrowserRouter>);\n\nReactDOM.render(application, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}